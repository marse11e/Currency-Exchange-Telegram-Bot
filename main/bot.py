import logging

import requests
import telebot
from telebot import types

from django.conf import settings
from django.core.files.base import ContentFile

from .models import TelegramUser
from .button import main, currency, unit_of_measurement, crypto_currency
from .pars import Parser


bot = telebot.TeleBot(settings.TOKEN_BOT, parse_mode="HTML")


def ads(ads_telegram):
    users = TelegramUser.objects.all()
    for user in users:
        print("ads")
        text = ads_telegram.text 
        if ads_telegram.url:
            text += f"\n\n<a href='{ads_telegram.url}'>{ads_telegram.url.split('/')[2].split('.')[0]}</a>"

        if ads_telegram.url2:
            text += f"\n\n<a href='{ads_telegram.url2}'>{ads_telegram.url2.split('/')[2].split('.')[0]}</a>"

        if ads_telegram.image:
            with open(ads_telegram.image.path, "rb") as f:
                bot.send_photo(user.user_id, f, caption=text)
        else:
            bot.send_message(user.user_id, text)
    return


class TelegramAvatar:
    def __init__(self, message, model_user):
        self.user_id = message.from_user.id
        self.model_user = model_user
        
    def get_avatar(self):
        photos = bot.get_user_profile_photos(self.user_id, limit=1)
        if photos.photos:
            file_id = photos.photos[0][-1].file_id
            file_info = bot.get_file(file_id)
            file_url = settings.GET_FILE_URL + file_info.file_path
            response = requests.get(file_url)
            if response.status_code == 200:
                self.model_user.image.save(f"{self.model_user.user_id}_profile_photo.jpg", ContentFile(response.content), save=True)
            return
        
        response = requests.get(settings.DEFULT_IMAGE)
        if response.status_code == 200:
            self.model_user.image.save(f"{self.model_user.user_id}_profile_photo.jpg", ContentFile(response.content), save=True)
            return
        
        return None

@bot.message_handler(commands=['start'])
def start(message):
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
    from_user = message.from_user

    model_user, created = TelegramUser.objects.get_or_create(user_id=from_user.id)

    if created:
        model_user.user_id = from_user.id
        model_user.username = from_user.username
        model_user.first_name = from_user.first_name
        model_user.last_name = from_user.last_name
        model_user.language_code = from_user.language_code
        model_user.is_bot = from_user.is_bot
        model_user.save()

        TelegramAvatar(message, model_user).get_avatar()

    bot.send_message(
        message.chat.id, 
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {model_user.get_name()} –≤ –Ω–∞—à –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É.", 
        reply_markup=main()
    )


@bot.message_handler(func=lambda message: message.text.lower() == "–º–µ–Ω—é")
def menu(message):
    bot.send_message( message.chat.id,  "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",  reply_markup=main())


def currency_convert_step_two(message, url):
    try:
        amount = float(message.text)
        rezult = Parser(url + str(amount))
    except:
        bot.send_message( message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, currency_convert_step_two, url)
    
    else:
        bot.send_message( message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {rezult.proccessing_method()}", reply_markup=main())
        return

def currency_convert_step(message):
    if message.text.lower() in settings.CONVERT:
        bot.send_message( message.chat.id,  "–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",  reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, currency_convert_step_two, settings.CONVERT[message.text.lower()])
        return
    else:
        bot.send_message( message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.", reply_markup=main())
        return
        

@bot.message_handler(func=lambda message: message.text.lower() == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã")
def currency_convert(message):
    bot.send_message( message.chat.id,  "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",  reply_markup=currency(settings.CONVERT))
    bot.register_next_step_handler(message, currency_convert_step)


def crypto_convert_step_two(message, url):
    try:
        amount = float(message.text)
        rezult = Parser(url + str(amount))
    except:
        bot.send_message( message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, crypto_convert_step_two, url)
    
    else:
        bot.send_message( message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {rezult.proccessing_method()}", reply_markup=main())
        return


def crypto_convert_step(message):
    if message.text.lower() in settings.CRYPTHO_CONVERT:
        bot.send_message( message.chat.id,  "–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",  reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, crypto_convert_step_two, settings.CRYPTHO_CONVERT[message.text.lower()])
        return
    else:
        bot.send_message( message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.", reply_markup=main())
        return


@bot.message_handler(func=lambda message: message.text.lower() == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç—ã")
def crypto(message):
    bot.send_message( message.chat.id,  "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",  reply_markup=crypto_currency(settings.CRYPTHO_CONVERT))
    bot.register_next_step_handler(message, crypto_convert_step)



@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
def profile(message):
    from_user = message.from_user
    model_user = TelegramUser.objects.get(user_id=from_user.id)
    if not model_user.image:
        TelegramAvatar(message, model_user).get_avatar()
    text = ( f"ü™™–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {model_user.get_full_name()}\n" f"ü™™–ò–º—è: {model_user.first_name}\n" f"ü™™–§–∞–º–∏–ª–∏—è: {model_user.last_name}\n" f"ü™™–ò–º—è –ø–æ–ª—å-–ª—è: {model_user.username}\n" f"üìÖ–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {model_user.created_at.strftime('%d.%m.%Y')}\n")
    bot.send_photo(message.chat.id, photo=model_user.image, caption=text, has_spoiler=True)


def measurement_3(message, iz):
    if str(message.text).isdigit():
        if iz == 1:
            text = (
                f"–ö–∏–ª–æ–º–µ—Ç—Ä (–∫–º) - {message.text} –∫–º = {int(message.text) * 1000} –º\n"
                f"–ö–∏–ª–æ–º–µ—Ç—Ä (–∫–º) - {message.text} –∫–º = {int(message.text) * 100000} –¥–º\n"
                f"–ö–∏–ª–æ–º–µ—Ç—Ä (–∫–º) - {message.text} –∫–º = {int(message.text) * 1000000} —Å–º\n"
                f"–ö–∏–ª–æ–º–µ—Ç—Ä (–∫–º) - {message.text} –∫–º = {int(message.text) * 10000000} –º–º\n"
            )
            bot.send_message( message.chat.id, text, reply_markup=main())
            return
        
        elif iz == 2:
            text = (
                f"–ú–µ—Ç—Ä (–º) - {message.text} –º = {int(message.text) / 1000} –∫–º\n"
                f"–ú–µ—Ç—Ä (–º) - {message.text} –º = {int(message.text) * 10} –¥–º\n"
                f"–ú–µ—Ç—Ä (–º) - {message.text} –º = {int(message.text) * 100} —Å–º\n"
                f"–ú–µ—Ç—Ä (–º) - {message.text} –º = {int(message.text) * 1000} –º–º\n"
            )
            bot.send_message( message.chat.id, text, reply_markup=main())
            return

        elif iz == 3:
            text = (
                f"–°–∞–Ω—Ç–∏–º–µ—Ç—Ä (—Å–º) - {message.text} —Å–º = {int(message.text) / 100000} –∫–º\n"
                f"–°–∞–Ω—Ç–∏–º–µ—Ç—Ä (—Å–º) - {message.text} —Å–º = {int(message.text) / 100} –º\n"
                f"–°–∞–Ω—Ç–∏–º–µ—Ç—Ä (—Å–º) - {message.text} —Å–º = {int(message.text) / 10} –¥–º\n"
                f"–°–∞–Ω—Ç–∏–º–µ—Ç—Ä (—Å–º) - {message.text} —Å–º = {int(message.text) * 10} –º–º\n"
            )
            bot.send_message( message.chat.id, text, reply_markup=main())
            return

        elif iz == 4:
            text = (
                f"–î–µ—Ü–∏–º–µ—Ç—Ä (–¥–º) - {message.text} –¥–º = {int(message.text) / 10000} –∫–º\n"
                f"–î–µ—Ü–∏–º–µ—Ç—Ä (–¥–º) - {message.text} –¥–º = {int(message.text) / 10} –º\n"
                f"–î–µ—Ü–∏–º–µ—Ç—Ä (–¥–º) - {message.text} –¥–º = {int(message.text) * 10} —Å–º\n"
                f"–î–µ—Ü–∏–º–µ—Ç—Ä (–¥–º) - {message.text} –¥–º = {int(message.text) * 100} –º–º\n"
            )
            bot.send_message( message.chat.id, text, reply_markup=main())
            return
        
        elif iz == 5:
            text = (
                f"–ú–∏–ª–ª–∏–º–µ—Ç—Ä (–º–º) - {message.text} –º–º = {int(message.text) / 1000000} –∫–º\n"
                f"–ú–∏–ª–ª–∏–º–µ—Ç—Ä (–º–º) - {message.text} –º–º = {int(message.text) / 1000} –º\n"
                f"–ú–∏–ª–ª–∏–º–µ—Ç—Ä (–º–º) - {message.text} –º–º = {int(message.text) / 100} –¥–º\n"
                f"–ú–∏–ª–ª–∏–º–µ—Ç—Ä (–º–º) - {message.text} –º–º = {int(message.text) / 10} —Å–º\n"
            )
            bot.send_message( message.chat.id, text, reply_markup=main())
            return

        else:
            bot.send_message( message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
            
    else:
        bot.send_message( message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, measurement_3, iz)


def measurement_2(message):
    ms = str(message.text)
    if ms.startswith("–ö–∏–ª–æ–º–µ—Ç—Ä"):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:", reply_markup=main())
        bot.register_next_step_handler(message, measurement_3, 1)
        return
    
    elif ms.startswith("–ú–µ—Ç—Ä"):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:", reply_markup=main())
        bot.register_next_step_handler(message, measurement_3, 2)
        return

    elif ms.startswith("–°–∞–Ω—Ç–∏–º–µ—Ç—Ä"):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:",reply_markup=main())
        bot.register_next_step_handler(message, measurement_3, 3)
        return
    
    elif ms.startswith("–î–µ—Ü–∏–º–µ—Ç—Ä"):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:",reply_markup=main())
        bot.register_next_step_handler(message, measurement_3, 4)
        return
    
    elif ms.startswith("–ú–∏–ª–ª–∏–º–µ—Ç—Ä"):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:",reply_markup=main())
        bot.register_next_step_handler(message, measurement_3, 5)
        return

    else:
        bot.send_message( message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.", reply_markup=main())
        return


@bot.message_handler(func=lambda message: message.text.lower() == "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è")
def measurement(message):
    text = (
        "–ö–∏–ª–æ–º–µ—Ç—Ä (–∫–º) - 1 –∫–º = 1000 –º–µ—Ç—Ä–æ–≤\n"
        "–ú–µ—Ç—Ä (–º) - 1 –º = 100 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤.\n"
        "–°–∞–Ω—Ç–∏–º–µ—Ç—Ä (—Å–º) - 1 —Å–º = 10 –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤.\n"
        "–î–µ—Ü–∏–º–µ—Ç—Ä (–¥–º) - 1 –¥–º = 10 —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤.\n"
        "–ú–∏–ª–ª–∏–º–µ—Ç—Ä (–º–º).\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:"
    )
    bot.send_message(message.chat.id,  text,  reply_markup=unit_of_measurement())
    bot.register_next_step_handler(message, measurement_2)


def RunBot():
    print("–ù–∞—á–∞–ª–∞—Å—å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏—è [ –´ ]")
    bot.polling(none_stop=True, interval=0)
    